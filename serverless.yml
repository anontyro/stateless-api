service: my-rest-api

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 128
  timeout: 10
  stage: dev
  region: us-east-1

functions:
  #call to validate endpoints with JWT
  authorise: 
    handler: services/auth/handler.isUserAuthorised

  # FILM Endpoints ----------------------------------------------------------

  # Get the complete list of films in the database
  getFilms:
    handler: services/film/handler.getFilms
    events:
      - http:
          path: films
          method: get
          cors: true

# AUTH CONTROLS --------------------------------------

  # Get a list of all users in the database, this returns a restricted list
  # to prevent senstaive data being passed back
  # requires JWT to access
  getUserList:
    handler: services/auth/handler.getUsers
    events:
        - http:
            path: users
            method: get
            cors: true
            authorizer: authorise

  # Post a new user, by default the user will be unverified and must be manually
  # verified to prevent unwanted access to the site content
  register:
    handler: services/auth/handler.register
    events:
      - http:
          path: register
          method: post
          cors: true

  # Post a user login, requires username(email) and password which will be checked
  # in the database to ensure the user details are correct.
  # returns JWT in token
  login:
    handler: services/auth/handler.login
    events:
      - http:
          path: login
          method: post
          cors: true

  updateUser:
    handler: services/auth/handler.updateUser
    events:
      - http:
          path: user
          method: put
          cors: true
          authorizer: authorise

  # Put request used to update the users password
  # requires username(email), old password and new password
  updatePassword:
    handler: services/auth/handler.updateUserPassword
    events:
      - http:
          path: updatepassword
          method: put
          cors: true

  deleteUser:
    handler: services/auth/handler.deleteUser
    events:
      - http:
          path: user/{id}
          method: delete
          cors: true
          authorizer: authorise

# Blog Endpoints -------------------------------------

  getBlogs:
    handler: services/blog/handler.getBlogs
    events:
      - http:
          path: blog
          method: get
          cors: true
  
  getAllBlogs:
    handler: services/blog/handler.getAllBlogs
    events:
      - http:
          path: blog/all
          corse: true
          authorizer: authorise

  getBlog:
    handler: services/blog/handler.getBlog
    events:  
      - http:
          path: blog/{slug}
          method: get
          cors: true

  createBlog:
    handler: services/blog/handler.createBlog
    events:  
      - http:
          path: blog
          method: post
          cors: true
          authorizer: authorise

  updateBlog:
    handler: services/blog/handler.updateBlog
    events:  
      - http:
          path: blog
          method: put
          cors: true
          authorizer: authorise

  deleteBlog:
    handler: services/blog/handler.deleteBlog
    events:  
    - http:
        path: blog/{id}
        method: delete
        cors: true
        authorizer: authorise

# Resume Table -------------------------------------------

  getResumes:
    handler: services/resume/handler.getResumes
    events:
    - http:
        path: resumes
        method: get
        cors: true
        authorizer: authorise

  getResume:
    handler: services/resume/handler.getResume
    events:
    - http:
        path: resume
        method: get
        cors: true

  createResume:
      handler: services/resume/handler.createResume
      events:
      - http:
          path: resume
          method: post
          cors: true
          authorizer: authorise

  updateResume:
      handler: services/resume/handler.updateResume
      events:
      - http:
          path: resume
          method: put
          cors: true
          authorizer: authorise  
          
  patchResumeActive:
      handler: services/resume/handler.patchResumeActive
      events:
      - http:
          path: resume
          method: patch
          cors: true
          authorizer: authorise 
  
  deleteResume:
      handler: services/resume/handler.deleteResume
      events:
      - http:
          path: resume/{id}
          method: delete
          cors: true
          authorizer: authorise

# Portfolio Table ----------------------------------------


# Site Settings table ------------------------------------

plugins:
- serverless-offline # adding the plugin to be able to run the offline emulation