service: my-rest-api

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 128
  timeout: 10
  stage: dev
  region: us-east-1

functions:
  #call to validate endpoints with JWT
  authorise: 
    handler: services/auth/handler.isUserAuthorised

  # FILM Endpoints ----------------------------------------------------------

  # Get the complete list of films in the database
  getFilms:
    handler: services/film/handler.getFilms
    events:
      - http:
          path: films
          method: get
          cors: true

  # Get a specific film by title partial
  getFilm:
    handler: services/film/handler.getFilm
    events:
      - http:
          path: film/{title}
          method: get
          cors: true

  # Post a new film, requires user to be logged in
  create:
    handler: services/film/handler.create
    events: 
      - http:
          path: film
          method: post
          cors: true
          authorizer: authorise

  # Put film values, requires user to be logged in
  update:
    handler: services/film/handler.update
    events:
      - http:
          path: film/{id}
          method: put
          cors: true
          authorizer: authorise

  # Delete a film from the database, requires user to be logged in
  delete:
    handler: services/film/handler.delete
    events:
      - http:
          path: film/{id}
          method: delete
          cors: true
          authorizer: authorise

# AUTH CONTROLS --------------------------------------
  getUserList:
    handler: services/auth/handler.getUsers
    events:
        - http:
            path: users
            method: get
            cors: true
            authorizer: authorise

  register:
    handler: services/auth/handler.register
    events:
      - http:
          path: register
          method: post
          cors: true

  login:
    handler: services/auth/handler.login
    events:
      - http:
          path: login
          method: post
          cors: true

  updatePassword:
    handler: services/auth/handler.updateUserPassword
    events:
      - http:
          path: updatepassword
          method: put
          cors: true

  deleteUser:
    handler: services/auth/handler.deleteUser
    events:
      - http:
          path: user/{id}
          method: delete
          cors: true
          authorizer: authorise

# Blog Endpoints -------------------------------------

getBlogs:
  handler: services/blog/handler.getBlogs
  events:
    - http:
        path: blog
        method: get
        cors: true

getBlog:
  handler: services/blog/handler.getBlog
  events:  
    - http:
        path: blog/{slug}
        method: get
        cors: true

createBlog:
  handler: services/blog/handler.createBlog
  events:  
    - http:
        path: blog
        method: post
        cors: true
        authorizer: authorise

deleteBlog:
  handler: services/blog/handler.deleteBlog
  events:  
  - http:
      path: blog/{id}
      method: delete
      cors: true
      authorizer: authorise

plugins:
- serverless-offline # adding the plugin to be able to run the offline emulation